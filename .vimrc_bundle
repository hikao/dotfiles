" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets,~/.vim/snippets'

set timeout timeoutlen=1000 ttimeoutlen=50
syntax on
" viとの互換性OFF"
set nocompatible"{{{"{{{

" display
set number
set laststatus=2

" no highlight
set hlsearch
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" OverCommandLine
" <Leader> is \
nnoremap <silent> <Leader>m :OverCommandLine<CR>%s/

" yankround
" yankround.vim {{{
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
" 履歴取得数
let g:yankround_max_history = 50
" 履歴一覧(kien/ctrlp.vim)
nnoremap <silent>g<C-p> :<C-u>CtrlPYankRound<CR>
" }}}"}}}

" Unite関連
nnoremap [unite]    <Nop>
nmap     <Space>u [unite]

nnoremap <silent> [unite]c   :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]b   :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]m   :<C-u>Unite file_mru buffer<CR>

" インデント
set smartindent
" 行頭の余白内で Tab を打ち込むと、'shiftwidth' の数だけインデントする。
set smarttab
set shiftwidth=2
set softtabstop=2
set noet
"}}}
" tmux関連
" クリップボード連携 fakeclipを導入する（bundle管理）
set clipboard=unnamed

" NERDTree Keymap
nmap <silent> <C-E> :NERDTreeToggle<CR>
" NERDTree invisible .pyc file
let NERDTreeIgnore = ['\.pyc$']
" colorscheme
" colorscheme zenburn
" colorscheme molokai
" colorscheme jellybeans
colorscheme evening

" set t_Co=256

" edit
set backspace=indent,eol,start
set wildmenu
set formatoptions+=mM
set whichwrap=b,s,h,l,[,],<,>
set mouse=a
set ttymouse=xterm2

" search
set history=100
set ignorecase
set smartcase
set wrapscan

" for Whitespace
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/

" for python edit---------------------------
filetype plugin on
autocmd FileType python setl autoindent
autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType python setl expandtab tabstop=4 shiftwidth=4 softtabstop=4
" autocmd FileType python setl cindent
autocmd FileType python setl textwidth=80

" for Ruby settins-------------------------
autocmd FileType ruby setl autoindent
autocmd FileType ruby setl smartindent cinwords=class,if,elde,for,try,except,def
autocmd FileType ruby setl expandtab tabstop=2 shiftwidth=2 softtabstop=2


" Folding
set foldmethod=manual
set foldlevel=99

" Excute python script C-P
function! s:ExecPy()
    exe "!" . &ft . " %"
:endfunction
command! Exec call <SID>ExecPy()
autocmd FileType python map <silent> <C-P> :call <SID>ExecPy()<CR>

" Execute pep8 keymap F8
autocmd FileType python map <F8> :!pep8 --ignore=E501 %<CR>

" show nosetests keymap C-N
autocmd FileType python map <C-N> :!nosetests % -s -v -a ''

" For Python_diction
" autocmd FileType python let g:pydiction_location = '~/.vim/pydiction/complete-dict'

" -----User Defined Settings------
" 行末スペースをファイル保存時に削除する設定
autocmd BufWritePre * :%s/\s\+$//ge

" -------vundle setting------------"
set grepprg=internal
filetype off
if has('vim_starting')
  set runtimepath+=$HOME/.vim/vundle.git/

  call vundle#rc()
endif
Bundle 'vim-scripts/grep.vim'
" Bundle 'vim-scripts/surround.vim'
Bundle 'Townk/vim-autoclose'
Bundle 'vim-scripts/quickrun.vim'
Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/neosnippet'
Bundle 'Shougo/neosnippet-snippets'
Bundle 'Lokaltog/powerline'
Bundle 'tpope/vim-fugitive'
" Bundle 'kana /vim-fakeclip'
" Bundle 'thinca / 0001-vim-fakeclip-Support-tmux.patch'
Bundle 'osyo-manga/vim-over'
Bundle 'LeafCage/yankround.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'vim-scripts/copypath.vim'
Bundle 'Shougo/vimproc.vim'
Bundle 'Shougo/unite.vim'
Bundle 'ujihisa/unite-colorscheme'
Bundle 'Shougo/neomru.vim'

Bundle 'nvie/vim-flake8'
Bundle 'scrooloose/syntastic'
Bundle 'gregsexton/gitv'
Bundle 'tomasr/molokai'
Bundle 'AndrewRadev/switch.vim'
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-endwise'
Bundle 'nathanaelkane/vim-indent-guides'
" clolor scheme
Bundle 'nanotech/jellybeans.vim'
Bundle 'tomtom/tcomment_vim'

" vimproc Settings
let g:quickrun_config = {'runner' : 'vimproc'}

" quickrun
function! NosetestsQuickrun()
  let b:quickrun_config = {'type' : 'python.test'}
endfunction
autocmd BufReadPost *_test.py call NosetestsQuickrun()

let g:quickrun_config['python.test'] = {
    \'command': 'nosetests', 'cmdopt': '-s -v --nologcapture',
    \'hook/shebang/enable': 0,
    \}
"quickrun 指定したテストケースのみ実行 ex @attr(now=True)のみ実行
nmap <Space>k [quickrun]
nnoremap <silent> [quickrun]r :call QRunRspecCurrentLine()<CR>
fun! QRunRspecCurrentLine()
  let line = line(".")
  exe ":QuickRun -cmdopt '-s -v --nologcapture -a " . '"now"' . "'"
endfun

" neocomlcache
let g:neocomplcache_enable_at_startup = 1 " 起動時に有効化
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions',
    \ 'coffee' : $HOME.'/Dropbox/util/vim_conf/dict/javascript.dict'
    \ }

" specify patterns of included sentences
let g:neocomplcache_include_patterns = {
    \ 'python' : '^\s*import',
    \ 'php' : '^\s*require_once'
    \ }

" ポップアップメニューで表示される候補の数。初期値は100
" let g:neocomplcache_max_list = 20
" 自動補完を行う入力数を設定。初期値は2
" let g:neocomplcache_auto_completion_start_length = 2

filetype plugin on
filetype indent on

" ------- syntastic setting   -----------"
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2
let g:syntatic_ruby_checkers = ['rubocop']
" ------- power line setteing -----------"
set laststatus=2
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
set list
let g:Powerline_colorscheme='skwp'

set cursorline
" カーソル行を強調表示しない
set nocursorline
" 挿入モード時のみ、カーソル行をハイライト
autocmd InsertEnter,InsertLeave * set cursorline!
" カーソルのカレント行にハイライト
highlight CursorLine ctermfg=green

" ------- jellybeans settings  -----------"
let g:jellybeans_overrides = {
\    'Todo': { 'guifg': '303030', 'guibg': 'f0f000',
\              'ctermfg': 'Black', 'ctermbg': 'Yellow',
\              'attr': 'bold' },
\}
let g:jellybeans_use_lowcolor_black = 0

" ------- vim-indent-guides settings ---------
" vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup = 1
